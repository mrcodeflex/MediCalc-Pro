
import 'package:flutter/material.dart'; import 'dart:math' as math;
class CalcScreen extends StatefulWidget{ @override _CalcScreenState createState()=>_CalcScreenState(); }
class _CalcScreenState extends State<CalcScreen>{
  Map<String,dynamic>? calc; Map<String,TextEditingController> ctrls={}; String result='';
  @override void didChangeDependencies(){ super.didChangeDependencies(); calc = ModalRoute.of(context)!.settings.arguments as Map<String,dynamic>?; if(calc!=null){ for(var f in calc!['fields']){ ctrls[f['key']] = TextEditingController(text: f.containsKey('default')?f['default'].toString():''); if(f['type']=='select' && ctrls[f['key']]!.text==''){ if(f.containsKey('options')) ctrls[f['key']]!.text = f['options'][0]; } } } }
  double? toNum(String? s){ if(s==null||s.trim()=='') return null; return double.tryParse(s); }
  void calcNow(){ if(calc==null) return; final id = calc!['id']; if(id=='pt_inr'){ final p=toNum(ctrls['pt_patient']?.text); final c=toNum(ctrls['pt_control']?.text); final isi=toNum(ctrls['pt_isi']?.text)??1.0; if(p==null||c==null||p<=0||c<=0){ _show('Enter valid PT & control'); return; } final ratio=p/c; final quick=(c/p)*100; final inr=math.pow(ratio,isi); setState(()=>result='INR: '+(inr as double).toStringAsFixed(2)+'\nRatio: '+ratio.toStringAsFixed(2)+'\nQuick: '+quick.toStringAsFixed(1)+'%'); return; } if(id=='egfr_ckdepi'){ double? creat=toNum(ctrls['creatinine']?.text); final unit = ctrls['creatinine_unit']?.text ?? 'mg/dL'; final age=toNum(ctrls['age']?.text); final sex = ctrls['sex']?.text ?? 'male'; final useRace = (ctrls['race_factor']?.text ?? 'false')=='true'; if(creat==null||age==null){ _show('Enter creatinine & age'); return; } double creat_mg = creat; if(unit=='umol/L') creat_mg = creat/88.4; final kappa = sex=='female'?0.7:0.9; final alpha = sex=='female'?-0.329:-0.411; final sexF = sex=='female'?1.018:1.0; final raceF = useRace?1.159:1.0; final egfr = 141 * math.pow(math.min(creat_mg/kappa,1), alpha) * math.pow(math.max(creat_mg/kappa,1), -1.209) * math.pow(0.993, age) * sexF * raceF; setState(()=>result='eGFR: '+egfr.toStringAsFixed(1)+' mL/min/1.73mÂ²'); return; } _show('Not implemented'); }
  void _show(String m){ ScaffoldMessenger.of(context).showSnackBar(SnackBar(content:Text(m))); }
  Widget field(Map f){ if(f['type']=='number') return Padding(padding:EdgeInsets.symmetric(vertical:6), child: TextField(controller: ctrls[f['key']], keyboardType: TextInputType.numberWithOptions(decimal:true), decoration: InputDecoration(labelText:f['label']), onSubmitted: (_)=>calcNow())); if(f['type']=='select') return Padding(padding:EdgeInsets.symmetric(vertical:6), child: DropdownButtonFormField<String>(value: ctrls[f['key']]!.text, items:(f['options'] as List).map((op)=>DropdownMenuItem(value:op.toString(), child:Text(op.toString()))).toList(), onChanged:(v){ ctrls[f['key']]!.text = v ?? ''; }, decoration: InputDecoration(labelText:f['label']))); if(f['type']=='checkbox') return StatefulBuilder(builder:(c, setS){ bool v = ctrls[f['key']]!.text=='true'; return CheckboxListTile(title:Text(f['label']), value:v, onChanged:(nv){ setS(()=>v=nv??false); ctrls[f['key']]!.text = v? 'true':'false'; }); }); return SizedBox(); }
  @override Widget build(BuildContext c){ if(calc==null) return Scaffold(body:Center(child:Text('No calculator'))); return Scaffold(appBar:AppBar(title:Text(calc!['name'])), body:Padding(padding:EdgeInsets.all(12), child:Column(children:[ Text(calc!['description'] ?? ''), SizedBox(height:8), Expanded(child:ListView(children:(calc!['fields'] as List).map((f)=>field(f)).toList())), SizedBox(height:8), ElevatedButton(onPressed:calcNow, child:Text('Calculate')), if(result.isNotEmpty) Padding(padding:EdgeInsets.only(top:12), child:Card(child:Padding(padding:EdgeInsets.all(12), child:Text(result)))) ]))); }
}
